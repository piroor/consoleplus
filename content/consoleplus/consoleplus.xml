<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is the JavaScript Console Plus.
   -
   - The Initial Developer of the Original Code is SHIMODA Hiroshi.
   - Portions created by the Initial Developer are Copyright (C) 2003-2005
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s): SHIMODA Hiroshi <piro@p.club.ne.jp>
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<bindings id="consolePlusBindings"
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="console-box" extends="chrome://global/content/consoleBindings.xml#console-box">
	<implementation>
		<field name="_mPref">
			null
		</field>
		<property name="mPref">
			<getter><![CDATA[
				if (!this._mPref)
					this._mPref = Components.classes['@mozilla.org/preferences;1'].getService(Components.interfaces.nsIPrefBranch);

				return this._mPref;
			]]></getter>
		</property>

		<property name="showWebPageErrors">
			<getter><![CDATA[
				try {
					return this.mPref.getBoolPref('javascript.options.showWebPageErrorsInConsole');
				}
				catch(ex) {
					return true;
				}
			]]></getter>
			<setter><![CDATA[
				this.mPref.setBoolPref('javascript.options.showWebPageErrorsInConsole', val);
			]]></setter>
		</property>

		<property name="showChromeErrors">
			<getter><![CDATA[
				try {
					return this.mPref.getBoolPref('javascript.options.showInConsole');
				}
				catch(ex) {
					return false;
				}
			]]></getter>
			<setter><![CDATA[
				this.mPref.setBoolPref('javascript.options.showInConsole', val);
			]]></setter>
		</property>

		<property name="showCSSErrors">
			<getter><![CDATA[
				try {
					return this.mPref.getBoolPref('javascript.options.showCSSErrorsInConsole');
				}
				catch(ex) {
					return true;
				}
			]]></getter>
			<setter><![CDATA[
				this.mPref.setBoolPref('javascript.options.showCSSErrorsInConsole', val);
			]]></setter>
		</property>

		<method name="appendItem">
			<parameter name="aObject"/>
			<body><![CDATA[
				if (!aObject.message) return false;

				var msgObj;
				var isError = true;
				try {
					msgObj = aObject.QueryInterface(Components.interfaces.nsIScriptError);
				}
				catch(e) {
					isError = false;
					try {
						msgObj = aObject.QueryInterface(Components.interfaces.nsIConsoleMessage);
					}
					catch(e) {
						this.appendMessage(aObject && aObject.message ? aObject.message : aObject );
						return true;
					}
				}

				if (msgObj.sourceName &&
					msgObj.sourceName.indexOf('chrome://') == 0) {
					if (!this.showChromeErrors)
						return false;
				}
				else {
					if (!this.showWebPageErrors)
						return false;
				}

				if (msgObj.sourceName &&
					/\.css$/i.test(msgObj.sourceName) &&
					!this.showCSSErrors)
					return false;

				if (isError)
					this.appendError(msgObj);
				else
					this.appendMessage(msgObj.message);

				return true;
			]]></body>
		</method>

		<method name="observe">
			<parameter name="aConsoleMessage"/>
			<body><![CDATA[
				this.appendItem(aConsoleMessage);
			]]></body>
		</method>
	</implementation>
</binding>

<binding id="error" extends="chrome://global/content/consoleBindings.xml#error">
</binding>

<binding id="message" extends="chrome://global/content/consoleBindings.xml#message">
</binding>

<binding id="console-error-source" extends="chrome://global/content/consoleBindings.xml#console-error-source">
</binding>

</bindings>
